<html>
<head>
  <title>How Common is your Birthday?</title>
  <script src="https://d3js.org/d3.v7.min.js"></script>

  <style>
    h1, label{
        font-family: sans-serif;
        
    }
    h1{
        font-size: 50px;
    }
    label{
        font-size: 40px;
    }
    
    select {
        font-size: 40px; 
        padding: 10px; 
    }
    body {
      margin: 0;
      display: flex;
      justify-content: center;
      align-items: center;
      
    }
    
    .container {
      text-align: center;
    }

    .top-dates-container {
      font-size: 24px;
      background-color: #F0F0F0;
      text-align: center;
      margin-top: 20px;
      margin-left: 20px;
      font-family: sans-serif;
      border: solid black 2px;
      padding: 5px;
      
    }

  </style>
</head>
<body>
    <div class="container">
    <h1>How Common is Your Birthday?</h1>
    <label for="year">Find out how common your birthday was in:</label>
        <select id="year">
        <option value="2000">2000</option>
        <option value="2001">2001</option>
        <option value="2002">2002</option>
        <option value="2003">2003</option>
        <option value="2004">2004</option>
        <option value="2005">2005</option>
        <option value="2006">2006</option>
        <option value="2007">2007</option>
        <option value="2008">2008</option>
        <option value="2009">2009</option>
        <option value="2010">2010</option>
        <option value="2011">2011</option>
        <option value="2012">2012</option>
        <option value="2013">2013</option>
        <option value="2014">2014</option>
    </select><br><br>

    <div id = "map"></div>
    <svg id="colorLegend" height="100" width="700" style="background: white; " ></svg>
        
      </div>
    </div>
    <script>

        
        var margin = {top: 80, right: 25, bottom: 30, left: 40},
        width = 1000 - margin.left - margin.right,
        height = 1000 - margin.top - margin.bottom;

        var chartArea = d3.select("#map")
                    .append("svg")
                    .attr("width", width + margin.left + margin.right)
                    .attr("height", height + margin.top + margin.bottom)
                    .append("g")
                    .attr("transform",
                            "translate(" + margin.left + "," + margin.top + ")");

        
       

        const requestData = async function() {
            const births = await d3.csv("US_births_2000-2014_SSA.csv", d3.autoType)

            console.log(births);

            var filtered = filterData(births, 2000);
            processData(filtered)
            
            const yearDropdown = document.getElementById("year");
            yearDropdown.addEventListener("change", function() {
                var selectedYear = parseInt(yearDropdown.value);
                filtered = filterData(births, selectedYear);
                processData(filtered);
            });
            
        }

        function filterData(data, year){
            const filteredData = data.filter(d => d['year'] == year );
            return filteredData
        }


        function processData(data){
            const aggregatedData = {};

            data.forEach(datum => {
                const day = datum.date_of_month;
                const month = datum.month;

                const key = `${month}-${day}`;

                if (!aggregatedData[key]) {
                    aggregatedData[key] = 0;
                }

                aggregatedData[key] += datum.births;
            });

            const result = Object.keys(aggregatedData).map(key => {
                const [month, day] = key.split('-').map(Number);
                return { month, day, value: aggregatedData[key] };
            });
            result.sort((a, b) => b.value - a.value);

            result.forEach((d, i) => d.rank = i + 1);

            const topTenRankedDates = result.slice(0, 10);

            d3.selectAll(".top-dates-container").remove();

            const topDatesContainer = d3.select("body") 
                                        .append("div")
                                        .attr("class", "top-dates-container");

            topDatesContainer.append("h2").text("Top 10 Most Popular Birthdates");

            topDatesContainer.selectAll("p")
                .data(topTenRankedDates)
                .enter()
                .append("p")
                .text(d => `${d.month}-${d.day}: ${d.value} people`);

            buildMap(result);
        }

        function buildMap(data) {
            console.log(data)
            
            var myGroups = d3.range(1, 13);
            var myMonths = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'June', 'July', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec']
            var myVars = d3.range(1, 32);


            var x = d3.scaleBand().range([ 0, width ]).domain(myGroups).padding(0.1);

            chartArea.append("g")
                    .style("font-size", 20)
                    .attr("transform", "translate(0," + height + ")")
                    .call(d3.axisBottom(x).tickValues(myGroups).tickFormat((d, i) => myMonths[i]).tickSize(0))
                    .select(".domain").remove()

            chartArea.append("g")
                    .style("font-size", 20)
                    .call(d3.axisTop(x).tickValues(myGroups).tickFormat((d, i) => myMonths[i]).tickSize(0))
                    .select(".domain").remove();
            
            var y = d3.scaleBand().range([ 0, height ]).domain(myVars).padding(0.1);
            
            chartArea.append("g")
                    .style("font-size", 20)
                    .call(d3.axisLeft(y).tickValues(myVars).tickSize(0))
                    .select(".domain").remove()

            chartArea.append("g")
                    .style("font-size", 20)
                    .attr("transform", "translate(" + width + ", 0)")
                    .call(d3.axisRight(y).tickValues(myVars).tickSize(0))
                    .select(".domain").remove()
                    
            var valueExtent = d3.extent(data, d => d.value)
            var myColor = d3.scaleSequential().interpolator(d3.interpolateInferno).domain(valueExtent.reverse())

            drawLegend("#colorLegend", myColor);

            var tooltip = d3.select("#map")
                .append("div")
                .style("opacity", 0)
                .attr("class", "tooltip")
                .style("background-color", "#F0F0F0")
                .style("border", "solid")
                .style("border-width", "2px")
                .style("border-radius", "5px")
                .style("padding", "5px")

            var mouseover = function(event, d) {
                tooltip.style("opacity", 1)
                d3.select(this)
                    .style("stroke", "black")
                    .style("opacity", 1)
            }
            var mousemove = function(event, d) {
                var svgLeftEdge = chartArea.node().getBoundingClientRect().left;
                var offsetX = -490; 
                var tooltipWidth = parseFloat(tooltip.style("height")); 
                var yPos = event.pageY; 

                tooltip.html(`Date: ${d.month} / ${d.day} <br> ${d.value} people share your birthday!<br>Ranking: ${d.rank} out of 365`)
                    .style("left", (svgLeftEdge + offsetX) + "px") 
                    .style("top", yPos + "px") 
                    .style("position", "absolute")
                    .style("font-family", "sans-serif")
                    .style("font-size", 30)
                
            }
            var mouseleave = function(event, d) {
                tooltip.style("opacity", 0)
                d3.select(this)
                    .style("stroke", "none")
                    .style("opacity", 0.8)
            }

            chartArea.selectAll()
                .data(data)
                .enter()
                .append("rect")
                .attr("x", d => x(d.month) )
                .attr("y", d => y(d.day) )
                .attr("rx", 4)
                .attr("ry", 4)
                .attr("width", x.bandwidth() )
                .attr("height", y.bandwidth() )
                .attr("label", d => d["value"])
                .style("fill", d => myColor(d.value) )
                .style("stroke-width", 4)
                .style("stroke", "none")
                .style("opacity", 0.8)
                .on("mouseover", mouseover)
                .on("mousemove", mousemove)
                .on("mouseleave", mouseleave)
        


        }

        //Credit: Prof. Rz!!
        function drawLegend(legendSelector, legendColorScale) {
            const offsets = { width: 10,
                            top: 2,
                            bottom: 24 }; 
            
            const stepSize = 4; 
            const minMaxExtendPercent = 0;
        
            const legend = d3.select(legendSelector);

            legend.selectAll("*").remove();

            const legendHeight = legend.attr("height");
            const legendBarWidth = legend.attr("width") - (offsets.width * 2);
            const legendMinMax = d3.extent(legendColorScale.domain()); 
            const minMaxExtension = (legendMinMax[1] - legendMinMax[0]) * minMaxExtendPercent;
            const barHeight = legendHeight - offsets.top - offsets.bottom;     
            
            let barScale = d3.scaleLinear().domain([legendMinMax[0]-minMaxExtension,
                                                    legendMinMax[1]+minMaxExtension])
                                        .range([0,legendBarWidth]);

            let barAxis = d3.axisBottom(barScale);
            
            let bar = legend.append("g")
                            .attr("class", "legend colorbar")
                            .attr("transform", `translate(${offsets.width},${offsets.top})`)

            
            for (let i=0; i<legendBarWidth; i=i+stepSize) {
                
                let center = i+(stepSize/2);
                let dataCenter = barAxis.scale().invert( center );
                
                if ( dataCenter < legendMinMax[0] ) { 
                bar.append("rect")
                    .attr("x", i)
                    .attr("y", 0)
                    .attr("width", stepSize)
                    .attr("height",barHeight)
                    .style("fill", legendColorScale( legendMinMax[0] ) ); 
                }
                else if ( dataCenter < legendMinMax[1] ) {
                bar.append("rect")
                    .attr("x", i)
                    .attr("y", 0)
                    .attr("width", stepSize)
                    .attr("height",barHeight)
                    .style("fill", legendColorScale( dataCenter ) ); 
                }
                else {
                bar.append("rect")
                    .attr("x", i)
                    .attr("y", 0)
                    .attr("width", stepSize)
                    .attr("height",barHeight)
                    .style("fill", legendColorScale( legendMinMax[1] ) ); 
                }
                
            }
            
            legend.append("g")
                .attr("class", "legend axis")
                .attr("transform",`translate(${offsets.width},${offsets.top+barHeight+5})`)
                .call(barAxis);
        
    }


        requestData();

    </script>

</body>
</html>
